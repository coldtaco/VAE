Model type: SVAE
inputsize: [[4, 4], [8, 8]]
inlayersize: [64, 32, 16]
latentsize: 4
outlayersize: ListWrapper([16, 32, 64])
outputsize: [[4, 4], [1, 1]]
fc_size: [64, 32, 1]
Model has 2 inputs, class 0 is where the second input is drawn from a normal distributionwith mean of the first input, class 1 is where it isnt. Proper implementation of SVAE with no outliers
losses: ['mean_absolute_error', 'mean_absolute_error', 'KLD', 'weighted_ce']
loss_weights: [1, 1, 1, 10]
CEweights: [[1, 10], [1, 1]]
Average accuracy: 1.0
Balanced acc: 1.0
Average specificity: 1.0
Average sensitivity (Detection rate): 1.0
Average loss: [0.6343099]
Average False Alarm: 0.0
Average F1: 1.0
Average cm:
||True 0| True 1|
|-|-|-|
|Predicted 0|250.0|0.0
|Predicted 1|0.0|1.0

|Acc|Spec|Loss|
1.0|1.0|[0.6343099]
CV took 68.4983538080005 seconds
Pure training took 66.78060473900041
Test result on unseen data:
Average accuracy: 0.61625
Balanced acc: 0.61625
Average specificity: 1.0
Average sensitivity (Detection rate): 0.2325
Average loss: nan
Average False Alarm: 0.7675
Average F1: 0.3772819472616633
Average cm:
||True 0| True 1|
|-|-|-|
|Predicted 0|100.0|76.75
|Predicted 1|0.0|23.25

|Acc|Spec|Loss|
0.61625|1.0|nan
